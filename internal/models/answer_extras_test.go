// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testAnswerExtrasUpsert(t *testing.T) {
	t.Parallel()

	if len(answerExtrasAllColumns) == len(answerExtrasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnswerExtras{}
	if err = randomize.Struct(seed, &o, answerExtrasDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnswerExtras: %s", err)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, answerExtrasDBTypes, false, answerExtrasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnswerExtras: %s", err)
	}

	count, err = AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnswerExtras(t *testing.T) {
	t.Parallel()

	query := AnswerExtras()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnswerExtrasDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswerExtrasQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnswerExtras().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswerExtrasSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnswerExtrasSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswerExtrasExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnswerExtrasExists(ctx, tx, o.AnswerID)
	if err != nil {
		t.Errorf("Unable to check if AnswerExtras exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnswerExtrasExists to return true, but got false.")
	}
}

func testAnswerExtrasFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	answerExtrasFound, err := FindAnswerExtras(ctx, tx, o.AnswerID)
	if err != nil {
		t.Error(err)
	}

	if answerExtrasFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnswerExtrasBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnswerExtras().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnswerExtrasOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnswerExtras().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnswerExtrasAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	answerExtrasOne := &AnswerExtras{}
	answerExtrasTwo := &AnswerExtras{}
	if err = randomize.Struct(seed, answerExtrasOne, answerExtrasDBTypes, false, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}
	if err = randomize.Struct(seed, answerExtrasTwo, answerExtrasDBTypes, false, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = answerExtrasOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = answerExtrasTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnswerExtras().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnswerExtrasCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	answerExtrasOne := &AnswerExtras{}
	answerExtrasTwo := &AnswerExtras{}
	if err = randomize.Struct(seed, answerExtrasOne, answerExtrasDBTypes, false, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}
	if err = randomize.Struct(seed, answerExtrasTwo, answerExtrasDBTypes, false, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = answerExtrasOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = answerExtrasTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func answerExtrasBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func answerExtrasAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerExtras) error {
	*o = AnswerExtras{}
	return nil
}

func testAnswerExtrasHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnswerExtras{}
	o := &AnswerExtras{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnswerExtras object: %s", err)
	}

	AddAnswerExtrasHook(boil.BeforeInsertHook, answerExtrasBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	answerExtrasBeforeInsertHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.AfterInsertHook, answerExtrasAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	answerExtrasAfterInsertHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.AfterSelectHook, answerExtrasAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	answerExtrasAfterSelectHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.BeforeUpdateHook, answerExtrasBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	answerExtrasBeforeUpdateHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.AfterUpdateHook, answerExtrasAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	answerExtrasAfterUpdateHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.BeforeDeleteHook, answerExtrasBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	answerExtrasBeforeDeleteHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.AfterDeleteHook, answerExtrasAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	answerExtrasAfterDeleteHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.BeforeUpsertHook, answerExtrasBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	answerExtrasBeforeUpsertHooks = []AnswerExtrasHook{}

	AddAnswerExtrasHook(boil.AfterUpsertHook, answerExtrasAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	answerExtrasAfterUpsertHooks = []AnswerExtrasHook{}
}

func testAnswerExtrasInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnswerExtrasInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(answerExtrasColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnswerExtrasToOneAnswerUsingAnswer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnswerExtras
	var foreign Answer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, answerExtrasDBTypes, false, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AnswerID = foreign.AnswerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Answer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AnswerID != foreign.AnswerID {
		t.Errorf("want: %v, got %v", foreign.AnswerID, check.AnswerID)
	}

	slice := AnswerExtrasSlice{&local}
	if err = local.L.LoadAnswer(ctx, tx, false, (*[]*AnswerExtras)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Answer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Answer = nil
	if err = local.L.LoadAnswer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Answer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnswerExtrasToOneSetOpAnswerUsingAnswer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnswerExtras
	var b, c Answer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, answerExtrasDBTypes, false, strmangle.SetComplement(answerExtrasPrimaryKeyColumns, answerExtrasColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, answerDBTypes, false, strmangle.SetComplement(answerPrimaryKeyColumns, answerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, answerDBTypes, false, strmangle.SetComplement(answerPrimaryKeyColumns, answerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Answer{&b, &c} {
		err = a.SetAnswer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Answer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AnswerExtras != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AnswerID != x.AnswerID {
			t.Error("foreign key was wrong value", a.AnswerID)
		}

		if exists, err := AnswerExtrasExists(ctx, tx, a.AnswerID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAnswerExtrasReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnswerExtrasReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnswerExtrasSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnswerExtrasSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnswerExtras().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	answerExtrasDBTypes = map[string]string{`AnswerID`: `uuid`, `Port`: `int8`, `Priority`: `int8`, `Protocol`: `string`, `Weight`: `string`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                   = bytes.MinRead
)

func testAnswerExtrasUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(answerExtrasPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(answerExtrasAllColumns) == len(answerExtrasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnswerExtrasSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(answerExtrasAllColumns) == len(answerExtrasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnswerExtras{}
	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerExtras().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, answerExtrasDBTypes, true, answerExtrasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnswerExtras struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(answerExtrasAllColumns, answerExtrasPrimaryKeyColumns) {
		fields = answerExtrasAllColumns
	} else {
		fields = strmangle.SetComplement(
			answerExtrasAllColumns,
			answerExtrasPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnswerExtrasSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
