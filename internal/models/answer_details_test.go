// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testAnswerDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(answerDetailAllColumns) == len(answerDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnswerDetail{}
	if err = randomize.Struct(seed, &o, answerDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnswerDetail: %s", err)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, answerDetailDBTypes, false, answerDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnswerDetail: %s", err)
	}

	count, err = AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnswerDetails(t *testing.T) {
	t.Parallel()

	query := AnswerDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnswerDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswerDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnswerDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswerDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnswerDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswerDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnswerDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AnswerDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnswerDetailExists to return true, but got false.")
	}
}

func testAnswerDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	answerDetailFound, err := FindAnswerDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if answerDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnswerDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnswerDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnswerDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnswerDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnswerDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	answerDetailOne := &AnswerDetail{}
	answerDetailTwo := &AnswerDetail{}
	if err = randomize.Struct(seed, answerDetailOne, answerDetailDBTypes, false, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, answerDetailTwo, answerDetailDBTypes, false, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = answerDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = answerDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnswerDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnswerDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	answerDetailOne := &AnswerDetail{}
	answerDetailTwo := &AnswerDetail{}
	if err = randomize.Struct(seed, answerDetailOne, answerDetailDBTypes, false, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, answerDetailTwo, answerDetailDBTypes, false, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = answerDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = answerDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func answerDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func answerDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnswerDetail) error {
	*o = AnswerDetail{}
	return nil
}

func testAnswerDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnswerDetail{}
	o := &AnswerDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, answerDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnswerDetail object: %s", err)
	}

	AddAnswerDetailHook(boil.BeforeInsertHook, answerDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	answerDetailBeforeInsertHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.AfterInsertHook, answerDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	answerDetailAfterInsertHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.AfterSelectHook, answerDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	answerDetailAfterSelectHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.BeforeUpdateHook, answerDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	answerDetailBeforeUpdateHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.AfterUpdateHook, answerDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	answerDetailAfterUpdateHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.BeforeDeleteHook, answerDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	answerDetailBeforeDeleteHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.AfterDeleteHook, answerDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	answerDetailAfterDeleteHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.BeforeUpsertHook, answerDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	answerDetailBeforeUpsertHooks = []AnswerDetailHook{}

	AddAnswerDetailHook(boil.AfterUpsertHook, answerDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	answerDetailAfterUpsertHooks = []AnswerDetailHook{}
}

func testAnswerDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnswerDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(answerDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnswerDetailToOneAnswerUsingAnswer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnswerDetail
	var foreign Answer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, answerDetailDBTypes, false, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AnswerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Answer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnswerDetailSlice{&local}
	if err = local.L.LoadAnswer(ctx, tx, false, (*[]*AnswerDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Answer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Answer = nil
	if err = local.L.LoadAnswer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Answer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnswerDetailToOneSetOpAnswerUsingAnswer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnswerDetail
	var b, c Answer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, answerDetailDBTypes, false, strmangle.SetComplement(answerDetailPrimaryKeyColumns, answerDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, answerDBTypes, false, strmangle.SetComplement(answerPrimaryKeyColumns, answerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, answerDBTypes, false, strmangle.SetComplement(answerPrimaryKeyColumns, answerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Answer{&b, &c} {
		err = a.SetAnswer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Answer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AnswerDetail != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AnswerID != x.ID {
			t.Error("foreign key was wrong value", a.AnswerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AnswerID))
		reflect.Indirect(reflect.ValueOf(&a.AnswerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AnswerID != x.ID {
			t.Error("foreign key was wrong value", a.AnswerID, x.ID)
		}
	}
}

func testAnswerDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnswerDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnswerDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnswerDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnswerDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	answerDetailDBTypes = map[string]string{`ID`: `uuid`, `AnswerID`: `uuid`, `Port`: `int8`, `Priority`: `int8`, `Protocol`: `string`, `Weight`: `string`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                   = bytes.MinRead
)

func testAnswerDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(answerDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(answerDetailAllColumns) == len(answerDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnswerDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(answerDetailAllColumns) == len(answerDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnswerDetail{}
	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnswerDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, answerDetailDBTypes, true, answerDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnswerDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(answerDetailAllColumns, answerDetailPrimaryKeyColumns) {
		fields = answerDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			answerDetailAllColumns,
			answerDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnswerDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
